c
n
s
cell
n
s
cell
s
cell
s
n
cell
end
puts cell
@grid[row].each do |cell|
@grid[row]
c
[ (current_pos[0] + ydir),(current_pos[1] + 1) ]
[ (current_pos[0] + ydir)][(current_pos[1] + 1) ]
@board.grid[(current_pos[0] + ydir)][(current_pos[1] + 1)].class
@board.grid[(current_pos[0] + ydir)][(current_pos[1] + 1)].color
moves
[ (current_pos[0] + ydir)][(current_pos[1])]
[ (current_pos[0] + ydir)][(current_pos[1])
[ (current_pos[0] + ydir)][(current_pos[1]
moves
n
moves
n
moves
n
moves
n
moves
n
[ (current_pos[0] + ydir),current_pos[1] ]
current_pos[0]
n
moves
arr
n
current_pos
self.color
ydir
c
 c
c
array_of_moves
c
array_of_moves
c
   c
exit
c
exit
a
j
k
j
n
k
mult2
mult1
a
c
a
c
a
c
a
c
exit
n
p
n
k
j
n
a
c
a
c
a
c
mult2
mult1
k
j
n
c
k
j
b
a
c
cc
c
exit
eit
j == 0 && k == 0
j == 9 && k == 0
k
j
n
k
j
n
exit
c
exit
k
j
a
k
j
a
k
j
n
k
j
n
a
c
a
c
a
c
n
j
k
n
k
j
n
c
exit
mult2
mult1
k
j
n
c
j
k
n
k
j
n
k
j
n
b
a
n
c
exit
a
c
arr
n
k
j
n
k
j
n
a
exit
n
j
k
n
j
k
j
n
a
n
mult2
mult1
c
n
k
j
n
a
b
a
n
a
k
j
mult2
mult1
c
b
a
k
j
c
j
k
j
n
j
k
b
a
k
j
a
mult1
c
mult2
mult1
c
mult2
mult1
c
mult2
c
mult2
mult1
c
 c
c
exit
self.color
@board.grid[current_pos[0] + k][(current_pos[1] + j)].color
j
n
!(current_pos[1] + j).between?(0,7)
!(current_pos[0] + k).between?(0,7)
exit
n
j
current_pos
!(current_pos[0] + j).between?(0,7)
n
!(current_pos[0] + j).between?(0,7)
(current_pos[0] + j).between?(0,7)
exit
arr
n
s
exit
arr
n
nn
current_pos
mult2
mult1
exit
moves
j
