exit
c
exit
a
j
k
j
n
k
mult2
mult1
a
c
a
c
a
c
a
c
exit
n
p
n
k
j
n
a
c
a
c
a
c
mult2
mult1
k
j
n
c
k
j
b
a
c
cc
c
exit
eit
j == 0 && k == 0
j == 9 && k == 0
k
j
n
k
j
n
exit
c
exit
k
j
a
k
j
a
k
j
n
k
j
n
a
c
a
c
a
c
n
j
k
n
k
j
n
c
exit
mult2
mult1
k
j
n
c
j
k
n
k
j
n
k
j
n
b
a
n
c
exit
a
c
arr
n
k
j
n
k
j
n
a
exit
n
j
k
n
j
k
j
n
a
n
mult2
mult1
c
n
k
j
n
a
b
a
n
a
k
j
mult2
mult1
c
b
a
k
j
c
j
k
j
n
j
k
b
a
k
j
a
mult1
c
mult2
mult1
c
mult2
mult1
c
mult2
c
mult2
mult1
c
 c
c
exit
self.color
@board.grid[current_pos[0] + k][(current_pos[1] + j)].color
j
n
!(current_pos[1] + j).between?(0,7)
!(current_pos[0] + k).between?(0,7)
exit
n
j
current_pos
!(current_pos[0] + j).between?(0,7)
n
!(current_pos[0] + j).between?(0,7)
(current_pos[0] + j).between?(0,7)
exit
arr
n
s
exit
arr
n
nn
current_pos
mult2
mult1
exit
moves
j
c
j
c
moves
a
j
c
exit
@board.grid[current_pos[0]][(current_pos[1] + j)].class
@board.grid[current_pos[0]]@board.grid[current_pos[0]][(current_pos[1] + j)].class
@board.grid[current_pos[0]]
@board.grid
@board
@board.grid[current_pos[0][(current_pos[1] + j)]
@board.grid[current_pos[0][(current_pos[1] + j)].class
@board.grid[current_pos[0][(current_pos[1] + j)].class == Nul_piece
(current_pos[1] + j) < 0
(current_pos[1] + j) > 7
current_pos
[(current_pos[0]), (current_pos[1] + j)]
j
c
j
c
 [(current_pos[0]), (current_pos[1] + j)]
c
k
j
c
k
j
c
n
k
j
c
k
j
exit
c
k
j
c
k
j
c
exit
k
j
c
k
j
