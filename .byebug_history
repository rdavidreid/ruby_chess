exit
c
k
j
c
k
j
c
exit
k
j
c
k
j
c
k
j
c
k
j
 c
k
j
c
k
j
c
k
j
c
n
k
j
@board.grid[(current_pos[0] + k)][(current_pos[1] + j)]k
@board.grid[(current_pos[0] + k)][(current_pos[1] + j)].color
@board.grid[(current_pos[0] + k)][(current_pos[1] + j)].class
@board.grid[(current_pos[0] + k)][(current_pos[1] + j)].class == Nul_piece
moves
j
k
n
k
j
n
current_pos
j
k
c
arr
c
moves
arr
moves
c
arr
moves
arr
c
moves
arr
moves
arr
c
arr
c
moves
arr
c
moves
n
moves
k
j
k
j
c
k
j
c
 c
c
exit
arr
n
arr
c
arr
c
arr
c
arr
c
arr
c
exit
arr
c
arr
c
arr
c
arr
c
exit
arr
c
arr
c
j
k
a
arr
c
j
k
arr
c
arr
c
exit
arr
moves
c
k
j
moves
c
exit
arr
c
moves
mult2
mult1
self
j
k
moves
c
exit
moves
[(current_pos[0] + k), (current_pos[1] + j)]
moves
@board.grid[(current_pos[0] + k)][(current_pos[1] + j)].color
moves
k
j
c
moves
n
c
k
n
c
current_pos[0] + j
current_pos[0] + k
current_pos[0]
k
moves
@board.grid[(current_pos[0] + k)][(current_pos[1] + j)].color
current_pos
k
j
 c
k
j
c
 c
c
cc
c
cc
c
moves
@board.grid[(current_pos[0] + k)][(current_pos[1] + j)].color != nil
@board.grid[(current_pos[0] + k)][(current_pos[1] + j)].color == self.color
@board.grid[(current_pos[0] + k)][(current_pos[1] + j)].class == Nul_piece
@board.grid[(current_pos[0] + k)][(current_pos[1] + j)].class == NilClass
@board.grid[(current_pos[0] + k)].class == NilClass
@board.grid[(current_pos[0] + k)][(current_pos[1] + j)].color != nil
k
j
c
k
j
c
@board.grid[(current_pos[0] + k)][(current_pos[1] + j)].color != nil
k
j
c
k
j
c
exit
k
j
c
k
j
c
cc
c
cc
c
k
j
c
k
j
c
k
j
k
j
k
c
k
c
j
k
i
exit
c
cc
c
cc
c
cc
exit
c
current_pos
@board.grid[0][0]
self.color
self.class
self
slef
c
cc
c
exit
@current_pos
pos
@pos
self.pos
@board
@board.grid
@board
@bord
@oard
@color
self.color
self.asdkjasdkfjkasjdf
self.asd;flkjasl;dkfj
self.grid
self.board
self.class
self
